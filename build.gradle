/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'Masaya' at '16/11/23 17:12' with Gradle 2.14.1
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.14.1/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'war'
apply plugin: "com.moowork.node"

apply plugin: 'eclipse'

tasks.withType(JavaCompile) {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
    options.encoding = 'UTF-8'
}
buildscript {
  repositories{
    maven {
        url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath "com.moowork.gradle:gradle-node-plugin:0.14"
  }
}
repositories {
    mavenCentral()
}

dependencies {
    providedCompile 'fish.payara.extras:payara-micro:4.1.1.164'
    providedCompile 'org.projectlombok:lombok:1.16.4'
    testCompile 'junit:junit:4.12'
    testCompile 'org.assertj:assertj-core:3.2.0'
    // https://mvnrepository.com/artifact/org.mindrot/jbcrypt
    compile group: 'org.mindrot', name: 'jbcrypt', version: '0.3m'
    
    testCompile 'com.codeborne:selenide:4.0'
    compile group: 'com.fasterxml.jackson.module', name: 'jackson-module-jsonSchema', version: '2.8.5'
    compile group: 'com.github.javaparser', name: 'javaparser-core', version: '2.5.1'
    // https://mvnrepository.com/artifact/com.h2database/h2
    compile group: 'com.h2database', name: 'h2', version: '1.4.193'
    
    
}

war.baseName = 'ROOT'
//  war.dependsOn 'npm_install'
war.dependsOn 'frontBuild'

task frontBuild(type: NpmTask) {
  args = ['run', 'build']
}

task runMicro(type: Exec, dependsOn: war) {
    def payaraJarPath = configurations
                        .providedCompile
                        .find {it.name =~ /payara-micro.*\.jar/}
                        .absolutePath
    def warFile = war.archivePath
    commandLine('java', '-jar', payaraJarPath, '--deploy', warFile)
}

task uberJar(type: Exec, dependsOn: war) {
    def payaraJarPath = configurations
                        .providedCompile
                        .find {it.name =~ /payara-micro.*\.jar/}
                        .absolutePath

    def warFile = war.archivePath
    def uberJarPath = warFile.path.replaceAll(/\.war$/, '.jar')

    commandLine('java', '-jar', payaraJarPath, '--deploy', warFile, '--outputUberJar', uberJarPath)
}
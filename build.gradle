/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'Masaya' at '16/11/23 17:12' with Gradle 2.14.1
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.14.1/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'war'

apply plugin: 'eclipse'

tasks.withType(JavaCompile) {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
    options.encoding = 'UTF-8'
}
// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    providedCompile 'fish.payara.extras:payara-micro:4.1.1.164'
    providedCompile 'org.projectlombok:lombok:1.16.4'
    
    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
    testCompile 'org.assertj:assertj-core:3.2.0'
}

war.baseName = 'ROOT'

task runMicro(type: Exec, dependsOn: war) {
    println("runMicro")
    def payaraJarPath = configurations
                        .providedCompile
                        .find {it.name =~ /payara-micro.*\.jar/}
                        .absolutePath
    def warFile = war.archivePath
    commandLine('java', '-jar', payaraJarPath, '--deploy', warFile)
}

task uberJar(type: Exec, dependsOn: war) {
    def payaraJarPath = configurations
                        .providedCompile
                        .find {it.name =~ /payara-micro.*\.jar/}
                        .absolutePath

    def warFile = war.archivePath
    def uberJarPath = warFile.path.replaceAll(/\.war$/, '.jar')

    commandLine('java', '-jar', payaraJarPath, '--deploy', warFile, '--outputUberJar', uberJarPath)
}